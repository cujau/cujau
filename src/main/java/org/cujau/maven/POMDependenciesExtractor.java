package org.cujau.maven;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.HashSet;
import java.util.Set;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * Extract the dependencies from a Maven POM file.
 */
public class POMDependenciesExtractor {

    public static void main( String[] args )
            throws ParserConfigurationException, SAXException, IOException {
        String baseDir = "/home/ravv/main/src/extra/myapp/";
        File pom = new File( baseDir + "pom.xml" );
        String mavenRepo = "/home/ravv/.m2/repository";
        String mainClass = "com.transparentmarket.TM";
        
        POMDependenciesExtractor extractor = new POMDependenciesExtractor( pom, mavenRepo );
        String cp =
            extractor.getDependenciesClasspath() + File.pathSeparatorChar
                    + extractor.getPOMAsDependency().getArtifactPath( mavenRepo );
        String cmdline = "java -classpath " + cp + " " + mainClass;

        PrintStream p = new PrintStream( new FileOutputStream( baseDir + "working.sh" ) );
        p.println( cmdline );
        p.close();
    }

    private File pomFile;
    private String mavenRepo;
    private Document pomDocument;

    /**
     * Create a new dependency extractor.
     * 
     * @param pomFile
     *            The maven POM File.
     * @param mavenRepository
     *            The base directory of the maven repository to use when
     *            creating full path names.
     * 
     * @throws ParserConfigurationException
     * @throws SAXException
     * @throws IOException
     */
    public POMDependenciesExtractor( File pomFile, String mavenRepository )
            throws ParserConfigurationException, SAXException, IOException {
        this.pomFile = pomFile;
        this.mavenRepo = mavenRepository;
        this.pomDocument = parseFile( this.pomFile );
    }

    /**
     * Traverse the dependency tree to get the entire set of dependencies
     * required by this POM file.
     * 
     * @return A Set of {@link POMDependency} objects.
     */
    public Set<POMDependency> getDependencies() {
        Set<POMDependency> deps = new HashSet<POMDependency>();
        NodeList depElems = pomDocument.getElementsByTagName( "dependency" );
        for ( int i = 0; i < depElems.getLength(); i++ ) {
            POMDependency dep = new POMDependency( (Element) depElems.item( i ) );
            deps.add( dep );
            deps.addAll( getDependenciesRecursive( dep ) );
        }
        System.out.println( pomFile.toString() );
        for ( POMDependency dep : deps ) {
            System.out.println( "  " + dep.toString() );
        }
        return deps;
    }

    /**
     * Return a {@link POMDependency} object that represents the artifact
     * generated by this POM file.
     * 
     * @return A {@link POMDependency} object.
     */
    public POMDependency getPOMAsDependency() {
        return new POMDependency( pomDocument.getDocumentElement() );
    }

    /**
     * Traverse the dependency tree to get the entire set of dependent artifacts
     * required by this POM file.
     * 
     * @return A Set of Strings containing absolute paths to dependent
     *         artifacts.
     */
    public Set<String> getDependencyPaths() {
        Set<String> paths = new HashSet<String>();
        for ( POMDependency dep : getDependencies() ) {
            paths.add( dep.getArtifactPath( mavenRepo ) );
        }
        return paths;
    }

    /**
     * @return The dependency tree as a classpath.
     */
    public String getDependenciesClasspath() {
        Set<String> depPaths = getDependencyPaths();
        StringBuffer buf = new StringBuffer();
        for ( String path : depPaths ) {
            buf.append( path ).append( File.pathSeparatorChar );
        }
        return buf.substring( 0, buf.length() - 1 );
    }

    private Set<POMDependency> getDependenciesRecursive( POMDependency dep ) {
        String depPom = dep.getPOMPath( mavenRepo );
        POMDependenciesExtractor extractor = null;
        try {
            extractor = new POMDependenciesExtractor( new File( depPom ), mavenRepo );
        } catch ( Exception e ) {
            return new HashSet<POMDependency>();
        }
        return extractor.getDependencies();
    }

    private Document parseFile( File xmlfile )
            throws ParserConfigurationException, SAXException, IOException {
        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        return builder.parse( xmlfile );
    }

}
